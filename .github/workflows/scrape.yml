      - name: Load active competition IDs
        run: |
          mkdir -p server/data
          curl -fsSL "$RAW_ACTIVE_URL" -o server/data/active_comp_ids.json || echo '{"active_comp_ids":[]}' > server/data/active_comp_ids.json
          COMP_IDS=$(python - <<'PY'
            import json
            try:
                d=json.load(open("server/data/active_comp_ids.json","r",encoding="utf-8"))
                ids=d.get("active_comp_ids",[])
                print(",".join(str(x) for x in ids))
            except Exception:
                print("")
          PY
          )
          echo "COMP_IDS=${COMP_IDS}" >> $GITHUB_ENV
          echo "Loaded COMP_IDS=${COMP_IDS}"

      - name: Compute new arbs and notify (filtered bookies)
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          ROI_THRESHOLD_PCT:  ${{ env.ROI_THRESHOLD_PCT }}
          NOTIFY_BOOKIES:     ${{ env.NOTIFY_BOOKIES }}
        run: |
          python - << 'PY'
            import json, os, re, subprocess

            ROI_THRESHOLD_PCT = float(os.environ.get("ROI_THRESHOLD_PCT","2.0"))
            THRESH = ROI_THRESHOLD_PCT / 100.0

            def norm_agency(a: str) -> str:
                a = (a or "")
                a = re.sub(r"\(.*?\)", "", a)
                a = a.split('-', 1)[0]
                a = a.strip().lower().replace(" ", "")
                return a

            allow_csv = os.environ.get("NOTIFY_BOOKIES", "sportsbet,bet365,neds,tab")
            ALLOW = { norm_agency(x) for x in allow_csv.split(",") if x.strip() }

            def load_json(path, default):
                try:
                    with open(path, "r", encoding="utf-8") as f:
                        return json.load(f)
                except Exception:
                    return default

            cur = load_json("server/data/opportunities.json", {"items":[]})
            if isinstance(cur, list):
                cur = {"items": cur}
            items = cur.get("items", [])

            seen = load_json("seen_keys.json", [])
            seen_set = set(seen if isinstance(seen, list) else [])

            def key(it):
                def n(x): return (x or "").strip().lower()
                return "|".join([
                    str(it.get("competitionid") or it.get("competitionId") or ""),
                    n(it.get("sport")), n(it.get("game")), n(it.get("market")),
                    n(it.get("match")), it.get("dateISO") or it.get("date") or ""
                ])

            new_hits = []
            for it in items:
                try:
                    roi = float(it.get("roi") or 0.0)
                except:
                    roi = 0.0
                if roi < THRESH:
                    continue

                best = (it.get("book_table") or {}).get("best") or {}
                L = best.get("left")  or {}
                R = best.get("right") or {}
                if not (L.get("agency") and R.get("agency") and L.get("odds") and R.get("odds")):
                    continue

                left_ok  = norm_agency(L["agency"]) in ALLOW
                right_ok = norm_agency(R["agency"]) in ALLOW
                if not (left_ok and right_ok):
                    continue

                k = key(it)
                if k in seen_set:
                    continue
                new_hits.append(it)
                seen_set.add(k)

            with open("seen_keys.json", "w", encoding="utf-8") as f:
                json.dump(sorted(list(seen_set)), f, ensure_ascii=False, indent=0)

            if not new_hits:
                raise SystemExit(0)

            new_hits.sort(key=lambda x: float(x.get('roi') or 0), reverse=True)

            def fmt(it):
                best = it["book_table"]["best"]
                L, R = best["left"], best["right"]
                sport = it.get("sport") or ""
                game  = it.get("game") or ""
                market= it.get("market") or ""
                match = it.get("match") or ""
                date  = it.get("date") or it.get("dateISO") or ""
                roi_pct = f"{(float(it.get('roi') or 0)*100):.2f}%"
                line1 = f"⚡ {sport}"
                line2 = f"{game} — {market}"
                line3 = f"{match}"
                line4 = f"{L['agency']} @ {float(L['odds']):.2f}  |  {R['agency']} @ {float(R['odds']):.2f}"
                line5 = f"ROI: {roi_pct}  |  {date}"
                return "\n".join([line1, line2, line3, line4, line5])

            msg = "New arbs over threshold (" + str(ROI_THRESHOLD_PCT) + "%)\n\n" + "\n\n".join(fmt(it) for it in new_hits[:8])
            open("msg.txt","w",encoding="utf-8").write(msg)

            tok = os.environ.get("TELEGRAM_BOT_TOKEN")
            chat= os.environ.get("TELEGRAM_CHAT_ID")
            if tok and chat:
                api = f"https://api.telegram.org/bot{tok}/sendMessage"
                subprocess.run([
                    "curl","-fsS","-X","POST",api,
                    "-d", f"chat_id={chat}",
                    "--data-urlencode","disable_web_page_preview=true",
                    "--data-urlencode", f"text={msg}"
                ], check=False)

            wh = os.environ.get("DISCORD_WEBHOOK_URL")
            if wh:
                payload = json.dumps({"content": msg})
                subprocess.run([
                    "curl","-fsS","-H","Content-Type: application/json",
                    "-d", payload, wh
                ], check=False)
          PY
